# coding: utf-8

import inspect
from abc import ABC, abstractmethod
from typing import Callable, Dict, List  # noqa: F401

from fastapi import (  # noqa: F401
    APIRouter,
    Body,
    Cookie,
    Depends,
    Form,
    Header,
    Path,
    Query,
    Response,
    Security,
    status,
)

from {{modelPackage}}.extra_models import TokenModel  # noqa: F401


{{#imports}}
{{import}}
{{/imports}}

class DefaultApi(ABC): 
    {{#operations}}
    {{#operation}}
    @abstractmethod
    async def {{operationId}}(
        self, 
         {{#allParams}}
        {{>endpoint_argument_definition}},
        {{/allParams}}
        {{#hasAuthMethods}}
        {{#authMethods}}
        token_{{name}}: TokenModel = Security(
            get_token_{{name}}{{#isOAuth}}, scopes=[{{#scopes}}"{{scope}}"{{^-last}}, {{/-last}}{{/scopes}}]{{/isOAuth}}
        ),
        {{/authMethods}}
        {{/hasAuthMethods}}
    ) -> {{returnType}}{{^returnType}}None{{/returnType}}:
        {{#notes}}"""{{.}}"""
        {{/notes}}{{^notes}}...{{/notes}}

    {{/operation}}
    {{/operations}}
def _assert_signature_is_set(method: Callable) -> None:
    """
    APIRouter().add_api_route expects the input method to have a signature. It gets signatures
    by running inspect.signature(method) under the hood. 

    In the case that an instance method does not declare "self" as an input parameter (due to developer error 
    for example), then the call to inspect.signature() fails. 

    This method is sort of a workaround. It tells the developer how to fix the problem if it's detected.
    """
    try:
        inspect.signature(method)
    except ValueError as e:
        # Based on empirical observation, the call to inspect fails with a ValueError
        # with exactly one argument: "invalid method signature"
        if e.args and len(e.args) == 1 and e.args[0] == "invalid method signature":
            # I couldn't figure out how to setattr on a "method" object to populate the signature. For now just kick
            # it back to the developer and tell them to set the "self" variable
            raise Exception(f"Method {method.__name__} in class {type(method.__self__).__name__} must declare the variable 'self'. ")
        else:
            raise


def initialize_router(api: DefaultApi) -> APIRouter:
    router = APIRouter()
    
    {{#operations}}
    {{#operation}}
    _assert_signature_is_set(api.{{operationId}})
    router.add_api_route(
        "{{path}}",
        endpoint=api.{{operationId}},
        methods=["{{#lambda.uppercase}}{{httpMethod}}{{/lambda.uppercase}}"],
        responses={
            {{#responses}}
            {{code}}: {{=<% %>=}}{<%#dataType%>"model": <%dataType%>, "description": "<%message%>"<%/dataType%><%^dataType%>"description": "<%message%>"<%/dataType%>}<%={{ }}=%>,
            {{/responses}}
        },
        tags=[{{#tags}}"{{name}}"{{^-last}},{{/-last}}{{/tags}}],
        {{#summary}}
        summary="{{.}}",
        {{/summary}}
        {{#description}}
        description = "{{.}}",
        {{/description}}
        response_model_by_alias=True,
    )

    {{/operation}}
    {{/operations}}
    
    return router
